{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":9782604164811708775,"abi":{"parameters":[{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_public_amount","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_root_direction_selector","type":{"kind":"array","length":1,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"624257843267711912":{"error_kind":"string","string":"New commits not included in new root"},"11889370444656604730":{"error_kind":"string","string":"Invalid out receiver commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"H4sIAAAAAAAA/9VXS24UMRB1z3Qyk/BJJkD4JEByA9vlL6ssuIjdbe9YIHEH7hGxgBXXYIc4Bhdgx6eacUumM0Eo7ZaYkp6q2p4uVdVzlacrspZzxFGyK8Q86UXSucySvkiaa6tAGx29YtoyygMHTZ1jyjHbguDBaNBRN671ASIzDFraUA/acuFjmGW+gCohguaBAXOUW28kFdIrg29JI1tuAIIRRltvNbVMQGBRWoh0LcvMFx0pec7VIOexce7dPE4YLlSJu3oQ649kLzN7ntl7ye7f20fcQtxG3MnWr+N9bA3qclyx/cK8D/mm44TtknUvXekdSamz4KXjEUsWOeeKUuOwftGJqAL2T2OEC40SigI+STAxSq1b5bDXFgX5uJvn6xU42XU15cwJZxV3QvKGW848KNyMkcXYmlZKRqWg0QQlbdCGW6ki21TDsfH1NZxPwE2pvEvycUC2Y5Ydbkmcq5vHyYcLm2Zu1z/9bD3I7MPMXpE/Z27n4x7iPuIBmX7mVuW4YkcFed9Uz/qaGv6tnseIh4hHiMfk6p14USj3fhaVPqNnZNp7bGx8i1Tj0n7PyTQzpC7M+3HBnJ8UjOusoK9t4WK3IBcnE/Xw/9QXm2Zsdwb7WXpC/m3GniKeIp4hnpPp76ydgmfmtHA968HZ7qT7f9rfD3mtZ+l5Z/BbMvDx4tunl6/e/nyXbf3+Nutk+eX15cfL71/zvVXS78G+gc8flmQgvwBoCwud5A8AAA==","debug_symbols":"7dfLioMwFAbgd8naRc7JTfsqw1C8xBIQFS8Dg/TdJxa1CZNpF12Vyc5j/hzDh5i4kEoX8+Vs2robyeljIU1X5pPpWlstBG63xj5v12qc8mEiJ6CcJUS3lb2EFK8JqU2jyUnCNfkVZoxuWSadKIaiQm5RjvSIoghEUUG2ZVEx9jgMSu2NQWXiSZgenYHK1A1/JgSjh+fBoofnwZ95IAjXw04RwSnsviSR8ceEXO0rEhTuUf6ehDJ6eB4qengeafTwPLLo4XkAfRlEIOwgTLgga/vwkUimxydeOTLhLe8NEMMHHYXHAzL8X28ViyA+CI8gPoiIID6IjCA+iHoZ5O+dyRbFYJrGXM7uH7y9/ZUPJi8avZX13JbO6PTd7yP7/H7oSl3Ng1473cZs+x8=","file_map":{"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"61":{"source":"use common::definitions::{account, commitment};\nuse common::merkle_tree::assert_merkle_inclusion;\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 2;\n\n// 0.000001 ETH = 1 ENG\nglobal ENG_TO_ETH_RATE: Field = 1_000_000_000_000;\nglobal ETH_TO_ENG_RATE: Field = 1_000_000_000_000_000_000;\nglobal WEI_TO_ENG: Field = 1_000_000_000_000;\n\npub fn main(\n    // accounts details\n    receiver_account: Field,\n    // utxo inputs\n    in_commitment_root: pub Field,\n    in_public_amount: pub Field,\n    // utxo outputs\n    out_receiver_commitment_bliding: Field,\n    out_receiver_commitment: pub Field,\n    // updated root\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1],\n    out_subtree_root_direction_selector: [bool; DEPTH - 1],\n) {\n    // validate commitment amounts and receivers are correct\n    let out_receiver_commitment_value = ((in_public_amount * ETH_TO_ENG_RATE) / ENG_TO_ETH_RATE) / WEI_TO_ENG;\n    \n    assert_eq(\n        commitment(\n            receiver_account,\n            out_receiver_commitment_value,\n            out_receiver_commitment_bliding,\n        ),\n        out_receiver_commitment,\n        \"Invalid out receiver commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_receiver_commitment, 0], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        new_subtree_root,\n        \"New commits not included in new root\",\n    );\n}\n\n\n#[test]\nfn test_allowed_deposit() {\n    // generate amounts\n    let in_public_amount = 500_000_000_000;\n    let out_receiver_commitment_value = 500_000;\n\n    // output commitment generation\n    let receiver_account = account(100);\n    let out_receiver_commitment_bliding = 3;\n    let out_receiver_commitment = commitment(\n        receiver_account,\n        out_receiver_commitment_value,\n        out_receiver_commitment_bliding,\n    );\n\n    // old tree\n    let old_first_level_l = hash([0, 0], 2);\n    let old_first_level_r = hash([0, 0], 2);\n    let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n    // new tree\n    let new_first_level_l = hash([out_receiver_commitment, 0], 2);\n    let new_first_level_r = hash([0, 0], 2);\n    let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n    main(\n        receiver_account,\n        in_commitment_root,\n        in_public_amount,\n        out_receiver_commitment_bliding,\n        out_receiver_commitment,\n        out_root,\n        [new_first_level_r],\n        [false],\n    );\n}\n\n#[test(should_fail)]\nfn test_unlinked_root() {\n    // generate amounts\n    let in_public_amount = 500_000_000_000;\n    let out_receiver_commitment_value = 500_000;\n\n    // output commitment generation\n    let receiver_account = account(100);\n    let out_receiver_commitment_bliding = 3;\n    let out_receiver_commitment = commitment(\n        receiver_account,\n        out_receiver_commitment_value,\n        out_receiver_commitment_bliding,\n    );\n\n    // old tree\n    let old_first_level_l = hash([0, 0], 2);\n    let old_first_level_r = hash([0, 0], 2);\n    let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n    // new tree\n    let new_first_level_l = hash([out_receiver_commitment, 0], 2); \n    let new_first_level_r = hash([0, 1], 2); // <---------- Add an extra commitment\n    let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n    main(\n        receiver_account,\n        in_commitment_root,\n        in_public_amount,\n        out_receiver_commitment_bliding,\n        out_receiver_commitment,\n        out_root,\n        [new_first_level_r],\n        [false],\n    );\n}\n\n\n\n#[test(should_fail)]\nfn test_missing_new_commits() {\n     // generate amounts\n    let in_public_amount = 500_000_000_000;\n    let out_receiver_commitment_value = 500_000;\n\n    // output commitment generation\n    let receiver_account = account(100);\n    let out_receiver_commitment_bliding = 3;\n    let out_receiver_commitment = commitment(\n        receiver_account,\n        out_receiver_commitment_value,\n        out_receiver_commitment_bliding,\n    );\n\n    // old tree\n    let old_first_level_l = hash([0, 0], 2);\n    let old_first_level_r = hash([0, 0], 2);\n    let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n    // new tree\n    let new_first_level_l = hash([0, 0], 2);  // <---------- Missing new\n    let new_first_level_r = hash([0, 0], 2);\n    let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n    main(\n        receiver_account,\n        in_commitment_root,\n        in_public_amount,\n        out_receiver_commitment_bliding,\n        out_receiver_commitment,\n        out_root,\n        [new_first_level_r],\n        [false],\n    );\n}\n","path":"/home/msg-encrypted/Documents/dev/examples/starkware-private-erc20/packages/circuits/deposit/src/main.nr"},"62":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// nullifier = hash(commitment, bliding) // same bliding as for commitment\npub fn nullifier(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 2)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/home/msg-encrypted/Documents/dev/examples/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/home/msg-encrypted/Documents/dev/examples/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}